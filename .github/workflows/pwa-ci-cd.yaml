# Archivo YAML actualizado con Jest
name: PWA CI/CD Workflow

on:
  push:
    branches:
      - main       # Ramas de producción
      - master     # Otra rama para producción
      - develop    # Rama para pruebas internas
      - feature/*  # Ramas de características de los programadores
      - release/*  # Ramas para versiones de producción
  pull_request:
    branches:
      - main
      - master
      - develop
  workflow_dispatch: # Activación manual opcional
    inputs:
      environment:
        description: 'Selecciona el entorno (staging o producción)'
        required: true
        default: 'staging'

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
      REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}
      REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}

    steps:
    # 1. Configuración del repositorio
    - name: Checkout código
      uses: actions/checkout@v3

    # 2. Configuración de Node.js
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    # 3. Configuración del caché para dependencias
    - name: Configurar caché de dependencias
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # 4. Instalación de dependencias
    - name: Instalar dependencias
      run: npm install --include=dev

    # 5. Ejecutar pruebas unitarias con Jest
    - name: Ejecutar pruebas unitarias con Jest
      run: npm run test:coverage
      env:
        CI: true # Asegura que Jest se ejecuta en modo continuo

    # 6. Generar reporte de cobertura
    - name: Subir reporte de cobertura como artefacto
      uses: actions/upload-artifact@v3
      with:
        name: cobertura-jest
        path: coverage/
        retention-days: 7

    # 7. Pruebas y compilación (solo para ramas develop y feature/*)
    - name: Ejecutar pruebas y compilación
      if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
      run: |
        npm run test -- --coverage
        npm run build

    # # 8. Subir artefacto de compilación
    # - name: Subir artefacto de compilación
    #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: build-artifact
    #     path: build/
    #     retention-days: 5

    # # 9. Despliegue a producción
    # - name: Desplegar a producción
    #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
    #   run: |
    #     npm install -g vercel
    #     vercel deploy --token=$VERCEL_TOKEN --prod
