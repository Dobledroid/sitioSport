name: PWA CI/CD Workflow

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Verificar y clonar el repositorio
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Configurar Node.js con la versión adecuada
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      # 3. Configuración del caché para dependencias npm
      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Instalación de dependencias
      - name: Install Dependencies
        run: npm install

      # 5. Construcción del proyecto
      - name: Build Project
        run: npm run build

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Verificar y clonar el repositorio
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Configurar Node.js con la versión adecuada
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      # 3. Instalación de dependencias
      - name: Install Dependencies
        run: npm install

      # 4. Iniciar servidor de desarrollo para pruebas E2E en el puerto 3000
      - name: Start Development Server
        run: npm start &
        env:
          PORT: 3000

      # 5. Esperar a que el servidor esté listo
      - name: Wait for Server to be Ready
        run: npx wait-on http://localhost:3000

      # 6. Ejecutar pruebas E2E con Cypress
      - name: Run E2E Tests with Cypress
        uses: cypress-io/github-action@v5
        with:
          config-file: cypress.json
          command: npx cypress run --headless --config video=false --timeout=300000

      # 7. Subir videos o resultados de pruebas E2E como artefacto (opcional)
      - name: Upload Cypress Results
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: cypress/videos/

      # 8. Notificación en PR si falla alguna prueba
      - name: Notify PR about Test Results
        if: failure()
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.payload.pull_request.number,
              body: ":x: Las pruebas E2E con Cypress han fallado. Por favor revisa los resultados."
            })

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      # 1. Verificar y clonar el repositorio
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Configurar Node.js con la versión adecuada
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      # 3. Instalación de dependencias
      - name: Install Dependencies
        run: npm install

      # 4. Construcción del proyecto para despliegue
      - name: Build Project
        run: npm run build

      # 5. Despliegue a Vercel (descomenta si usas Vercel para producción)
      # - name: Deploy to Vercel
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #   run: npx vercel deploy --prod
