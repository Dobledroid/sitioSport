name: PWA CI/CD Workflow

on:
  push:
    branches:
      - main       # Producción
      - master     # Producción alternativa
      - develop    # Pruebas internas
      - feature/*  # Características de programadores
      - release/*  # Versiones de producción
  pull_request:
    branches:
      - main
      - master
      - develop
  workflow_dispatch: # Activación manual opcional
    inputs:
      environment:
        description: 'Selecciona el entorno (staging o producción)'
        required: true
        default: 'staging'

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
      REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}
      REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}

    steps:
    # 1. Configuración del repositorio
    - name: Checkout código
      uses: actions/checkout@v3

    # 2. Configuración de Node.js
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    # 3. Configuración del caché para dependencias
    - name: Configurar caché de dependencias
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # 4. Instalación de dependencias
    - name: Instalar dependencias
      run: npm install --include=dev

    # 5. Ejecutar pruebas unitarias con Jest
    - name: Ejecutar pruebas unitarias con Jest
      run: npm run test:coverage
      env:
        CI: true

    # 6. Ejecutar pruebas E2E con Puppeteer
    - name: Ejecutar pruebas E2E con Puppeteer
      run: npm run test:puppeteer

    # 7. Subir reporte de cobertura como artefacto
    - name: Subir reporte de cobertura como artefacto
      uses: actions/upload-artifact@v3
      with:
        name: cobertura-jest
        path: coverage/
        retention-days: 7

    # # 8. Linter para control de calidad
    # - name: Ejecutar linter (ESLint)
    #   run: npm run lint

    # 9. Compilación del proyecto
    - name: Compilar proyecto
      run: npm run build

    # 10. Subir artefacto de compilación (opcional)
    - name: Subir artefacto de compilación
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: build/
        retention-days: 5

    # 11. Despliegue a producción en Vercel
    - name: Desplegar a Vercel
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
      run: |
        npm install -g vercel
        vercel deploy --token=$VERCEL_TOKEN --prod

    # 12. Notificaciones en Pull Requests
    - name: Notificar en Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v4
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: "✅ Pipeline ejecutado exitosamente para el Pull Request."
          })

  # 13. Notificaciones de fallos
  notify:
    runs-on: ubuntu-latest
    needs: ci-cd
    if: failure()
    steps:
      - name: Notificar fallo por correo
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ CI/CD Pipeline Falló"
          body: "El pipeline CI/CD falló durante la ejecución."
          to: "20210720@uthh.edu.mx, 20210680@uthh.edu.mx"
          from: "ci-cd-bot@example.com"
